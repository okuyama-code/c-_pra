#include <iostream>
#include <string>
#include <vector>
#include <sstream>
using namespace std;

int main() {
  // 数値を一つ入力する
  // int number;
  // cout << "数字を入力してください: ";
  // cin >> number; // ここで入力を待つ
  // cout << "あなたが入力した数字は " << number << " です。" << endl;

  // ------------------------------------------------------------------

  // 複数の値を入力する
  // std::cinが空白文字（スペース、タブ、改行など）を区切り文字として扱う
  // int x, y;
  // cout << "2つの数字をスペースで区切って入力してください: ";
  // cin >> x >> y; // 5 6 と入力
  // cout << "合計: " << x + y << endl; // => 合計: 11

  // ------------------------------------------------------------------

  // 文字列の入力
  // string name;
  // std::cout << "あなたの名前を入力してください: ";
  // cin >> name; // okuyama と入力
  // cout << "こんにちは、" << name << "さん！！" << endl; // => こんにちは、okuyamaさん！！

  // ------------------------------------------------------------------

  // 空白を含む文字列の入力
  // string full_name;
  // cout << "フルネームを入力してください: ";
  // getline(cin, full_name); // sato taro　と入力

  // cout << "こんにちは、" << full_name << "さん" << endl; // => こんにちは、sato taroさん

  // ------------------------------------------------------------------

  // 注意点：数値と文字列を混在させる場合 (失敗例)
  // int age;
  // string name;

  // cout << "年齢を入力してください: ";
  // cin >> age;

  // // 問題：この行ではEnterキーが入力バッファに残っているため、
  // // getlineはそれを読み取って即座に終了してしまう
  // cout << "名前を入力してください: ";
  // getline(cin, name); // この時点で入力バッファには'\n'が残っているので、「\n」だけを読み込んで、空の文字列を line に格納してしまいます。

  // cout << "あなたは" << age << "歳の" << name << "さんです。" << endl; // => (失敗例) 名前を入力してください: あなたは20歳のさんです。

  // ------------------------------------------------------------------

  // 数値と文字列を混在させる場合 (成功例)
  // int age;
  // string name;

  // cout << "年齢を入力してください: ";
  // cin >> age;

  // // std::cin.ignore() - 入力ストリーム(cin)から文字を読み飛ばす関数
  // // std::numeric_limits<std::streamsize>::max() - 読み飛ばす最大文字数を指定（今回も場合は改行文字を含むすべての文字を、バッファーから削除し、クリーンにする）
  // // '\n' - 改行文字が見つかるまで読み飛ばすという条件
  // cin.ignore(numeric_limits<streamsize>::max(), '\n');

  // cout << "名前を入力してください: ";
  // getline(cin, name);

  // cout << "あなたは" << age << "歳の" << name << "さんです。" << endl; // => (失敗例) 名前を入力してください: あなたは20歳のさんです。

  // ------------------------------------------------------------------

  // 入力した数字からスペース区切りの配列を作成
  string input;
  vector<int> numbers; // vectorは動的配列。 push_back(), pop_back(), insert(), erase()など、要素を操作するための便利なメソッドを多数提供。

  cout << "スペース区切りで数字を入力してください: ";
  getline(cin, input);

  // cout << input << endl; // => 1 2 3 4 5

  stringstream ss(input); // この行で作成される ss は、文字列をストリームとして扱うためのオブジェクト。ss はその文字列「1 2 3 4 5」を保持していますが、重要なのは単なる文字列ではなく、ストリームとして扱えるようになっていること

  int number;

  while (ss >> number) {
    // 要素を追加
    numbers.push_back(number);
  }

  cout << "あなたが入力した数字の配列: " << "{";
  for (size_t i = 0; i < numbers.size(); i++) {
    cout << numbers[i];
    if (i < numbers.size() - 1) {
      cout << ", ";
    }
  }

  cout << "}" << endl; // => あなたが入力した数字の配列: {1, 2, 3, 4, 5}

  return 0;
}